import os
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import collections 
from collections import deque
np.random.seed(0)
print(np.random.randn(1))

def FFN_return_output(input, No_hidden_layer, W, b):
  h = input     
  activation = []        
  pre_activation = []

  for layer_index in range(No_hidden_layer):

    a = np.dot(W[layer_index],h) + b[layer_index]
    pre_activation.append(a)

    h = activation_function(a)
    activation.append(h)
    del a

  a = np.dot(W[-1],h) + b[-1]
  pre_activation.append(a)

  activation.append(softmax(a))
  return activation[-1]

# Predict output prob for given input
def predict_model(input):
  predict_label = []
  for i in range(len_dataset):
    output_prob = FFN_return_output(np.array([input[i]]))
    output_class = np.argmax(output_prob) 
    predict_label = predict_label.append(output_class)
    return predict_label
    
 
